name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull submodules
        run: |
          git submodule update --init --recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker build -t cuevm ${{ github.workspace }}/.devcontainer

      - name: Start cuevm-test-runner container
        run: |
          docker run --memory="6g" --memory-swap="6g"  -d --name cuevm-test-runner \
            -v ${{ github.workspace }}:/workspaces/CuEVM \
            -w /workspaces/CuEVM \
            cuevm /bin/bash -c "tail -f /dev/null"

      - name: Build binary inside the container
        run: |
          docker exec cuevm-test-runner /bin/bash -c "
              cmake -S . -B build -DCPU='ON' -DCMAKE_EXPORT_COMPILE_COMMANDS=1 &&
              cmake --build build
          "

      - name: Clone ethereum/tests
        run: |
          git clone https://github.com/ethereum/tests.git ${{ github.workspace }}/ethereum/tests
          cd ${{ github.workspace }}/ethereum/tests && git checkout shanghai
          echo "Disabling vmPerformance test"
          mv ${{ github.workspace }}/ethereum/tests/GeneralStateTests/VMTests/vmPerformance /tmp/

      - name: Run tests
        run: |
          mkdir ${{ github.workspace }}/test-outputs

          # List of folders to process and their corresponding timeouts in seconds
          declare -A FOLDERS_WITH_TIMEOUTS=(
            ["VMTests"]=1200
            ["Shanghai"]=300
            ["stPreCompiledContracts"]=300
            ["stPreCompiledContracts2"]=300
            ["stArgsZeroOneBalance"]=300
            ["stAttackTest"]=300
            ["stBadOpcode"]=300
            ["stBugs"]=300
            ["stCallCodes"]=300
            ["stCallCreateCallCodeTest"]=300
            ["stCallDelegateCodesCallCodeHomestead"]=300
            ["stCallDelegateCodesHomestead"]=300
            ["stChainId"]=300
            ["stCodeCopyTest"]=300
            ["stCodeSizeLimit"]=300
            ["stCreate2"]=300
            ["stCreateTest"]=300
            ["stDelegatecallTestHomestead"]=300
            ["stEIP150singleCodeGasPrices"]=300
            ["stEIP150Specific"]=300
            ["stEIP1559"]=300
            ["stEIP158Specific"]=300
            ["stEIP2930"]=300
            ["stEIP3607"]=300
            ["stExample"]=300
            ["stExtCodeHash"]=300
            ["stHomesteadSpecific"]=300
            ["stInitCodeTest"]=300
            ["stLogTests"]=300
            ["stMemExpandingEIP150Calls"]=300
            ["stMemoryStressTest"]=300
            ["stMemoryTest"]=300
            ["stNonZeroCallsTest"]=300
            ["stQuadraticComplexityTest"]=300
            ["stRandom"]=300
            ["stRandom2"]=300
            ["stRecursiveCreate"]=300
            ["stRefundTest"]=300
            ["stReturnDataTest"]=300
            ["stRevertTest"]=300
            ["stSelfBalance"]=300
            ["stShift"]=300
            ["stSLoadTest"]=300
            ["stSolidityTest"]=300
            ["stSpecialTest"]=300
            ["stSStoreTest"]=300
            ["stStackTests"]=300
            ["stStaticCall"]=300
            ["stStaticFlagEnabled"]=300
            ["stSystemOperationsTest"]=300
            ["stTimeConsuming"]=300
            ["stTransactionTest"]=300
            ["stTransitionTest"]=300
            ["stWalletTest"]=300
            ["stZeroCallsRevert"]=300
            ["stZeroCallsTest"]=300
            ["stZeroKnowledge"]=300
            ["stZeroKnowledge2"]=300
          )

          # Loop through each folder and run the test with the specified timeout
          for folder in "${!FOLDERS_WITH_TIMEOUTS[@]}"; do
            timeout_value=${FOLDERS_WITH_TIMEOUTS[$folder]}
            echo "Running tests for $folder with a timeout of $timeout_value seconds..."

            # Using the timeout command to enforce the specified time limit for each folder
            timeout $timeout_value docker exec cuevm-test-runner \
              python3 scripts/run-ethtest-by-fork.py -t /tmp/ \
              --runtest-bin /goevmlab/runtest \
              --geth /goevmlab/gethvm \
              --cuevm /workspaces/CuEVM/build/cuevm_CPU \
              -i /workspaces/CuEVM/ethereum/tests/GeneralStateTests/"$folder" \
              --ignore-errors --without-state-root \
              | tee -a ${{ github.workspace }}/test-outputs/"$folder".log

            # Check if the timeout command exited with a specific status code (124 means timeout)
            if [ $? -eq 124 ]; then
              echo "Test for $folder timed out after $timeout_value seconds."
            elif [ $? -eq 137 ]; then
              echo "Test for $folder terminated due to out-of-memory."
            else
              echo "Test for $folder completed."
            fi
          done



      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ${{ github.workspace }}/test-outputs

      - name: Clean up
        if: always()
        run: |
          docker stop cuevm-test-runner
          docker rm cuevm-test-runner
