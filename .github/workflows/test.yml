name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.7
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull submodules
        run: |
          git submodule update --init --recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker build -t cuevm ${{ github.workspace }}/.devcontainer

      - name: Start cuevm-test-runner container
        run: |
          docker run -d --name cuevm-test-runner \
            -v ${{ github.workspace }}:/workspaces/CuEVM \
            -w /workspaces/CuEVM \
            cuevm /bin/bash -c "tail -f /dev/null"

      - name: Build binary inside the container
        run: |
          docker exec cuevm-test-runner /bin/bash -c "
              cmake -S . -B build -DCPU='ON' -DCMAKE_EXPORT_COMPILE_COMMANDS=1 &&
              cmake --build build
          "

      - name: Clone ethereum/tests
        run: |
          git clone https://github.com/ethereum/tests.git ${{ github.workspace }}/ethereum/tests
          cd ${{ github.workspace }}/ethereum/tests && git checkout shanghai

      - name: Run tests
        run: |
          mkdir ${{ github.workspace }}/test-outputs

          FOLDERS=(
          "VMTests"
          "Shanghai"
          "stPreCompiledContracts"
          "stPreCompiledContracts2"
          "stArgsZeroOneBalance"
          "stAttackTest"
          "stBadOpcode"
          "stBugs"
          "stCallCodes"
          "stCallCreateCallCodeTest"
          "stCallDelegateCodesCallCodeHomestead"
          "stCallDelegateCodesHomestead"
          "stChainId"
          "stCodeCopyTest"
          "stCodeSizeLimit"
          "stCreate2"
          "stCreateTest"
          "stDelegatecallTestHomestead"
          "stEIP150singleCodeGasPrices"
          "stEIP150Specific"
          "stEIP1559"
          "stEIP158Specific"
          "stEIP2930"
          "stEIP3607"
          "stExample"
          "stExtCodeHash"
          "stHomesteadSpecific"
          "stInitCodeTest"
          "stLogTests"
          "stMemExpandingEIP150Calls"
          "stMemoryStressTest"
          "stMemoryTest"
          "stNonZeroCallsTest"
          "stQuadraticComplexityTest"
          "stRandom"
          "stRandom2"
          "stRecursiveCreate"
          "stRefundTest"
          "stReturnDataTest"
          "stRevertTest"
          "stSelfBalance"
          "stShift"
          "stSLoadTest"
          "stSolidityTest"
          "stSpecialTest"
          "stSStoreTest"
          "stStackTests"
          "stStaticCall"
          "stStaticFlagEnabled"
          "stSystemOperationsTest"
          "stTimeConsuming"
          "stTransactionTest"
          "stTransitionTest"
          "stWalletTest"
          "stZeroCallsRevert"
          "stZeroCallsTest"
          "stZeroKnowledge"
          "stZeroKnowledge2"
          )

          for folder in "${FOLDERS[@]}"; do
            echo "Running tests for $folder with a 5-minute timeout..."

            # Using the timeout command to enforce the 5-minute limit
            timeout 300 docker exec --memory="6g" --memory-swap="6g" cuevm-test-runner \
              python3 scripts/run-ethtest-by-fork.py -t /tmp/ \
              --runtest-bin /goevmlab/runtest \
              --geth /goevmlab/gethvm \
              --cuevm /workspaces/CuEVM/build/cuevm_CPU \
              -i /workspaces/CuEVM/ethereum/tests/GeneralStateTests/"$folder" \
              --ignore-errors --without-state-root \
              | tee -a ${{ github.workspace }}/test-outputs/"$folder".log

            # Check if the timeout command exited with a specific status code (124 means timeout)
            if [ $? -eq 124 ]; then
              echo "Test for $folder timed out after 5 minutes."
            else
              echo "Test for $folder completed."
            fi
          done

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ${{ github.workspace }}/test-outputs

      - name: Clean up
        if: always()
        run: |
          docker stop cuevm-test-runner
          docker rm cuevm-test-runner
